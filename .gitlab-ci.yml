stages:
  - Build
  - Upload
  - Release

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .yarn/cache
    - node_modules/

# BUILD Production
build_to_production:
  stage: Build
  image: electronuserland/builder:wine
  before_script:
    - yarn install
  script:
    - export VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "VERSION=$VERSION" >> variables.env
    - export APPNAME=$(node -e "console.log(require('./package.json').name)")
    - echo "APPNAME=$APPNAME" >> variables.env
    - yarn dist:win
  artifacts:
    reports:
      dotenv: variables.env
    name: $CI_COMMIT_REF_SLUG
    paths:
      - $CI_PROJECT_DIR/dist/*.*
    when: on_success
  only:
    - main # specific branch build change branch according your repo

# BUILD Development
build_to_development:
  stage: Build
  image: electronuserland/builder:wine
  before_script:
    - yarn install
  script:
    - export VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "VERSION=$VERSION" >> variables.env
    - export APPNAME=$(node -e "console.log(require('./package.json').name)")
    - echo "APPNAME=$APPNAME" >> variables.env
    - yarn dist:win
  artifacts:
    reports:
      dotenv: variables.env
    name: $CI_COMMIT_REF_SLUG
    paths:
      - $CI_PROJECT_DIR/dist/*.*
    when: on_success
  only:
    - develop

variables:
  WIN_BINARY: '${APPNAME}-${VERSION}.exe'
  PACKAGE_REGISTRY_URL: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${APPNAME}/${VERSION}'
  PACKAGE_REGISTRY_URL_YML: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${APPNAME}'


# UPLOAD Production
upload_to_production:
  stage: Upload
  needs:
    - job: build_to_production
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when when commits are pushed to the default branch
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./dist/${WIN_BINARY}" "${PACKAGE_REGISTRY_URL}/${WIN_BINARY}"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./dist/latest.yml" "${PACKAGE_REGISTRY_URL}/latest.yml"'
    # - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./dist/latest.yml" "${PACKAGE_REGISTRY_URL_YML}/latest.yml"'
    - echo "${PACKAGE_REGISTRY_URL}/latest.yml"
    # - echo "${PACKAGE_REGISTRY_URL_YML}/latest.yml"

# UPLOAD Development
upload_to_development:
  stage: Upload
  needs:
    - job: build_to_development
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == 'develop'
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./dist/${WIN_BINARY}" "${PACKAGE_REGISTRY_URL}/${WIN_BINARY}"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./dist/latest.yml" "${PACKAGE_REGISTRY_URL}/latest.yml"'
    # - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "./dist/latest.yml" "${PACKAGE_REGISTRY_URL_YML}/latest.yml"'
    - echo "${PACKAGE_REGISTRY_URL}/latest.yml"
    # - echo "${PACKAGE_REGISTRY_URL_YML}/latest.yml"

# Release Production
auto-release-production:
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - job: build_to_production
      artifacts: true
    - job: upload_to_production
      artifacts: true
  stage: Release
  rules:
    - if: $CI_COMMIT_TAG
      when: never # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run this job when when commits are pushed to the default branch
  script:
    - echo "Release $VERSION"
    - |
      release-cli create --name "Release $VERSION" --tag-name v$VERSION \
      --description 'Created using the release-cli. $CI_COMMIT_TITLE' --ref $CI_COMMIT_SHA \
      --assets-link "{\"name\":\"${APPNAME}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${WIN_BINARY}\"}" \
      --assets-link "{\"name\":\"${APPNAME} Latest\",\"url\":\"${PACKAGE_REGISTRY_URL}/latest.yml\"}"

# Release Development
auto-release-development:
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - job: build_to_development
      artifacts: true
    - job: upload_to_development
      artifacts: true
  stage: Release
  rules:
    - if: $CI_COMMIT_TAG
      when: never # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == 'develop'
  script:
    - echo "Release $VERSION"
    - |
      release-cli create --name "Release $VERSION" --tag-name v$VERSION \
      --description 'Created using the release-cli. $CI_COMMIT_TITLE' --ref $CI_COMMIT_SHA \
      --assets-link "{\"name\":\"${APPNAME}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${WIN_BINARY}\"}" \
      --assets-link "{\"name\":\"${APPNAME} Latest\",\"url\":\"${PACKAGE_REGISTRY_URL}/latest.yml\"}"